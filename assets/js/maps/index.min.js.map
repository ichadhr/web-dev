{"version":3,"sources":["index.js"],"names":["jQuery","document","ready","$","Centerify","elem","options","init","onResize","self","windowHeight","window","height","centerOnSegment","percentage","isAnimating","done","off","scrollEvent","unbind","bodyAndHeadEl","get","scrollTop","e","which","type","stop","bind","clearTimeout","onScrollTimer","animate","Math","round","speed","this","$elem","$sections","children","count","length","wait","setTimeout","currentScroll","currentPercentage","toFixed","fn","centerify","each","data","Drawify","SVGEl","el","image","previousElementSibling","current_frame","total_frames","path","Array","handle","getViewportH","client","docElem","inner","getPageHeight","max","scrollY","pageYOffset","getOffset","offsetTop","offsetLeft","isNaN","offsetParent","top","left","inViewport","h","elH","offsetHeight","scrolled","viewed","elTop","elBottom","highlightDot","fullHeight","viewportHeight","position","fakePosition","current","$dots","removeClass","eq","addClass","resizeTimeout","svgs","prototype","slice","call","querySelectorAll","svgArr","didScroll","forEach","i","svg","parentNode","render","click","index","$body","scrollHandler","scrollPage","resizeHandler","delayed","addEventListener","documentElement","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","id","l","getTotalLength","style","strokeDasharray","strokeDashoffset","rendered","draw","next","progress","showImage","j","len","floor","drawify"],"mappings":"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","file":"index.min.js","sourcesContent":["jQuery(document).ready(function ($) {\n\n  (function() {\n    function Centerify(elem, options) {\n      var self = this;\n\n      self.$elem = $(elem);\n      self.$sections = self.$elem.children('section');\n      self.isAnimating = false;\n      self.bodyAndHeadEl = $('body');\n      self.count = self.$sections.length;\n      self.speed = 100;\n      self.wait = 500;\n\n      init();\n\n      function init() {\n        onResize();\n      }\n\n      function onResize() {\n        self.windowHeight = $(window).height();\n      }\n\n      function centerOnSegment(percentage) {\n        if (!percentage) {\n          return;\n        }\n\n        if (self.isAnimating) {\n          return;\n        }\n\n        var done = function done() {\n          self.isAnimating = false;\n          $(window).off('scroll', scrollEvent);\n          $(window).unbind('scroll mousedown wheel DOMMouseScroll mousewheel keyup', scrollEvent);\n\n          if (self.bodyAndHeadEl.get(0).scrollTop === 0) {\n            return;\n          }\n        };\n\n        var scrollEvent = function scrollEvent(e) {\n          if (e.which > 0 || e.type == 'mousedown' || e.type == 'mousewheel') {\n            self.bodyAndHeadEl.stop();\n            done();\n          }\n        };\n\n        $(window).bind('scroll mousedown wheel DOMMouseScroll mousewheel keyup', scrollEvent);\n\n        clearTimeout(self.onScrollTimer);\n\n        self.isAnimating = true;\n\n        self.bodyAndHeadEl.stop().animate({\n          scrollTop: (Math.round(percentage) * self.windowHeight)\n        }, self.speed, function () {\n          return done();\n        });\n      }\n\n      $(window).bind('scroll', function() {\n        clearTimeout(self.onScrollTimer);\n\n        self.onScrollTimer = setTimeout(function () {\n          var currentScroll =  self.bodyAndHeadEl.scrollTop();\n          var currentPercentage = (currentScroll / self.windowHeight).toFixed(2);\n          centerOnSegment(currentPercentage);\n        }, self.wait);\n      });\n\n      $(window).bind('resize', function() {\n        onResize();\n      });\n    }\n\n    $.fn.centerify = function(options) {\n      return this.each(function() {\n        if (!$(this).data('centerify'))\n          $(this).data('centerify', new Centerify(this, options));\n      });\n    };\n  })();\n\n  // $('#index').centerify();\n\n  (function() {\n    function Drawify() {\n      var docElem = window.document.documentElement;\n      var $dots = $('#dots ul li');\n      var $body = $('body');\n\n      window.requestAnimFrame = function(){\n        return (\n          window.requestAnimationFrame     ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame  ||\n          window.oRequestAnimationFrame    ||\n          window.msRequestAnimationFrame   ||\n          function(/* function */ callback){\n            window.setTimeout(callback, 1000 / 60);\n          }\n        );\n      }();\n\n      window.cancelAnimFrame = function(){\n        return (\n          window.cancelAnimationFrame     ||\n          window.webkitCancelAnimationFrame ||\n          window.mozCancelAnimationFrame  ||\n          window.oCancelAnimationFrame    ||\n          window.msCancelAnimationFrame   ||\n          function(id){\n            window.clearTimeout(id);\n          }\n        );\n      }();\n\n      function SVGEl( el ) {\n        this.el = el;\n        this.image = this.el.previousElementSibling;\n        this.current_frame = 0;\n        this.total_frames = 120;\n        this.path = new Array();\n        this.length = new Array();\n        this.handle = 0;\n        this.init();\n      }\n\n      SVGEl.prototype.init = function() {\n        var self = this;\n        [].slice.call( this.el.querySelectorAll('path')).forEach( function(path, i) {\n          self.path[i] = path;\n          var l = self.path[i].getTotalLength();\n          self.length[i] = l;\n          self.path[i].style.strokeDasharray = l + ' ' + l;\n          self.path[i].style.strokeDashoffset = l;\n        } );\n      };\n\n      SVGEl.prototype.render = function() {\n        if( this.rendered ) return;\n        this.rendered = true;\n        this.draw();\n        $(this.el).next().addClass('animate');\n      };\n\n      SVGEl.prototype.draw = function() {\n        var self = this,\n          progress = this.current_frame/this.total_frames;\n        if (progress > 1) {\n          window.cancelAnimFrame(this.handle);\n          this.showImage();\n        } else {\n          this.current_frame++;\n          for(var j=0, len = this.path.length; j<len;j++){\n            this.path[j].style.strokeDashoffset = Math.floor(this.length[j] * (1 - progress));\n          }\n          this.handle = window.requestAnimFrame(function() { self.draw(); });\n        }\n      };\n\n      SVGEl.prototype.showImage = function() {\n        // console.log($(this.el));\n        // classie.add( this.image, 'show' );\n        // classie.add( this.el, 'hide' );\n      };\n\n      function getViewportH() {\n        var client = docElem['clientHeight'],\n          inner = window['innerHeight'];\n\n        if( client < inner )\n          return inner;\n        else\n          return client;\n      }\n\n      function getPageHeight() {\n        return Math.max($(document).height(), $(window).height());\n      }\n\n      function scrollY() {\n        return window.pageYOffset || docElem.scrollTop;\n      }\n\n      // http://stackoverflow.com/a/5598797/989439\n      function getOffset(el) {\n        var offsetTop = 0, offsetLeft = 0;\n        do {\n          if ( !isNaN( el.offsetTop ) ) {\n            offsetTop += el.offsetTop;\n          }\n          if ( !isNaN( el.offsetLeft ) ) {\n            offsetLeft += el.offsetLeft;\n          }\n        } while( el = el.offsetParent )\n\n        return {\n          top : offsetTop,\n          left : offsetLeft\n        };\n      }\n\n      function inViewport(el, h) {\n        var elH = el.offsetHeight,\n          scrolled = scrollY(),\n          viewed = scrolled + getViewportH(),\n          elTop = getOffset(el).top,\n          elBottom = elTop + elH,\n          // if 0, the element is considered in the viewport as soon as it enters.\n          // if 1, the element is considered in the viewport only when it's fully inside\n          // value in percentage (1 >= h >= 0)\n          h = h || 0.1;\n\n        return (elTop + elH * h) <= viewed && (elBottom) >= scrolled;\n      }\n\n      function highlightDot() {\n        var fullHeight = getPageHeight();\n        var viewportHeight = getViewportH();\n        var position = scrollY();\n        var fakePosition = position - (viewportHeight / 4);\n        var current = Math.max(Math.round(fakePosition * 4 / fullHeight), 0);\n        $dots.removeClass('active');\n        $dots.eq(current).addClass('active');\n      }\n\n      function init() {\n        var svgs = Array.prototype.slice.call(document.querySelectorAll('#index svg')),\n          svgArr = new Array(),\n          didScroll = false,\n          resizeTimeout;\n\n        // the svgs already shown...\n        svgs.forEach(function(el, i) {\n          var svg = new SVGEl(el);\n          svgArr[i] = svg;\n          setTimeout(function(el) {\n            return function() {\n              if(inViewport(el.parentNode)) {\n                svg.render();\n              }\n            };\n          }(el), 250);\n        });\n\n        highlightDot();\n\n        $dots.click(function() {\n          var fullHeight = getPageHeight();\n          var index = $dots.index(this);\n          $body.stop().animate({\n            scrollTop: Math.round((fullHeight / 4) * index)\n          }, 200);\n        });\n\n        var scrollHandler = function() {\n          if(!didScroll) {\n            didScroll = true;\n            setTimeout(function() { scrollPage(); }, 60);\n          }\n        };\n\n        var scrollPage = function() {\n          svgs.forEach(function(el, i) {\n            if(inViewport(el.parentNode, 0.5)) {\n              svgArr[i].render();\n            }\n          });\n          highlightDot();\n          didScroll = false;\n        };\n\n        var resizeHandler = function() {\n          function delayed() {\n            scrollPage();\n            resizeTimeout = null;\n          }\n          if (resizeTimeout) {\n            clearTimeout(resizeTimeout);\n          }\n          resizeTimeout = setTimeout(delayed, 200);\n        };\n\n        window.addEventListener( 'scroll', scrollHandler, false );\n        window.addEventListener( 'resize', resizeHandler, false );\n      }\n\n      init();\n    }\n\n    $.fn.drawify = function(options) {\n      return this.each(function() {\n        if (!$(this).data('drawify'))\n          $(this).data('drawify', new Drawify(this, options));\n      });\n    };\n  })();\n\n  $('#index').drawify();\n\n});\n"],"sourceRoot":"/source/"}